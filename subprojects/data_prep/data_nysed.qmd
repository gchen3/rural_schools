---
output: html_document
editor_options: 
  chunk_output_type: console
---

# NYSED data

This page documents data sources obtained from the New York State Education Department (NYSED).


```{r }
#| label: setup
#| eval: true
#| include: false
#| echo: false

source(here::here("r", "libraries.r"))
dnysed <- r"(E:\Gang Chen\data\nysed\)"

```


## NYSED news

https://www.nysed.gov/news/2023

Feb 2 2023 The State Education Department today released graduation data for 2018 Cohort students, who are those students that graduated by August 2022. https://www.nysed.gov/news/2023/2018-cohort-graduation-rates-data

Oct 24 2022 https://www.nysed.gov/news/2022/state-education-department-releases-2021-22-final-state-assessment-results  final 2021-22 state assessment data -- months earlier than in previou8s years

https://www.nysed.gov/news/2023/us-department-education-approves-state-plan-restart-school-accountability-system U.S. Department of Education Approves State Plan to Restart School Accountability System


<!-- TODO:  -->
<!-- -   graduation rate percentiles -->

```{r}
#| label: info
#| eval: false
#| include: false

# Links:

# https://www.oms.nysed.gov/sedref/home.html  sedref info
# https://portal.nysed.gov/pls/sedrefpublic/SED.sed_inst_qry_vw$.startup lookup institutions

# https://www.oms.nysed.gov/sedref/home.html links to various codes - e.g., grade organization

# https://www.p12.nysed.gov/irs/data_reporting.html

# https://eservices.nysed.gov/sedreports/list?id=2 child nutrition 

# https://www.p12.nysed.gov/irs/schoolDirectory/
# https://www.oms.nysed.gov//sedref/home.html
# https://eservices.nysed.gov/sedreports/list?id=1
# https://cognos.nysed.gov/ibmcognos/bi/v1/disp?b_action=cognosViewer&ui.tool=CognosViewer&ui.action=run&ui.object=storeID(%27iE2F9F18D05114622ABE308D0AA265CE9%27)&cv.header=false&cv.toolbar=false&run.outputFormat=HTML
# https://data.nysed.gov/downloads.php
# https://www.p12.nysed.gov/irs/statistics/enroll-n-staff/home.html
# https://www.oms.nysed.gov//sedref/documents/GRADE-Organization-DESC.pdf
# https://www.p12.nysed.gov/irs/pmf/
# https://www.p12.nysed.gov/irs/pmf/PersonnelMasterFileStatisticalRuns2019-20.xlsx  has needs-resource codes
# https://data.ny.gov/browse?q=state%20education%20department&sortBy=relevance
# https://data.ny.gov/Government-Finance/New-York-State-School-Aid-Beginning-School-Year-19/9pb8-dg53  

```

## District and school identification codes

```{r}
#| label: get-ids
#| eval: false
#| include: false

# id crosswalk ------------------------------------------------------------

# you can get many kinds of linkage files from the landing page
# https://eservices.nysed.gov/sedreports/list?id=1  landing page

# go to the landing page and get csv version for [School Districts, Public & Charter Schools: NCES IDs]
# at time of download on June 8 2023 link was:
# https://eservices.nysed.gov/sedreports/view?rpt=%2Fcontent%2Ffolder%5B%40name%3D%27NYSED+Reports%27%5D%2Ffolder%5B%40name%3D%27SEDREF%27%5D%2Ffolder%5B%40name%3D%27SEDREF+Reports+for+Public+Website%27%5D%2Freport%5B%40name%3D%27School+Districts%2C+Public+%26+Charter+Schools%3A+NCES+IDs%27%5D&format=CSV&reportId=iE0680D8ED23E4088B5F288AEE1B63E23

fn <- "School Districts, Public & Charter Schools_ NCES IDs.csv"

# get district ids --------------------------------------------------------

# we need to set locale encoding to read this file

# character info (from Emeditor)
# 8
# U+0038
# UTF-16LE: 0x0038
# DIGIT EIGHT
# Unicode Script: Zyyy (Common)
# Unicode General Category: Nd (Decimal Number)
# File position: 1,896 bytes

# it now is csv, used to require the old reading code below
ids1 <- vroom(path(dnysed, fn),
             col_types = cols(.default = col_character()),
             # col_names = FALSE, # the col_names are not valid and must be fixed
             locale=locale(encoding="UTF-16LE")) # this is essential

# # old code
# ids1 <- vroom(path(dnysed, fn),
#              col_types = cols(.default = col_character()),
#              col_names = FALSE, # the col_names are not valid and must be fixed
#              locale=locale(encoding="UTF-16LE"), # this is essential
#              delim="\t", trim_ws = TRUE)

names(ids1)
(vnames <- str_replace_all(names(ids1), " ", "_"))
# [1] "Institution_ID"            "Legal_Name"                "Popular_Name"              "SED_Code"                 
# [5] "SchDistofLoc_Code"         "SchDistofLoc_Description"  "County_Code"               "County_Description"       
# [9] "INST_Type_Code"            "INST_Type_Description"     "INST_Sub_Type_Code"        "INST_Sub_Type_Description"
# [13] "Active_Date"               "Inactive_Date"             "EDEN_NCES_LEA_ID"          "EDEN_LEA_Type_CODE"       
# [17] "EDEN_LEA_OP_Status_Code"   "EDEN_NCES_SCH_ID"          "EDEN_Sch_Type_Code"        "EDEN_Sch_OP_Status_Code"  

ids2 <- ids1 |> 
  setNames(vnames)
glimpse(ids2)

# invesigate types of institutions
count(ids2, INST_Type_Code, INST_Type_Description)
#   INST_Type_Code INST_Type_Description     n
#   <chr>          <chr>                 <int>
# 1 10             GOVERNMENT AGENCIES      53
# 2 16             SCHOOL DISTRICTS        734
# 3 17             PUBLIC SCHOOLS         5289
# 4 18             BOCES                    38
# 5 21             CHILD NUTRITION           7

# subtypes -- 33 subtypes, most not of interest
count(ids2, INST_Type_Code, INST_Type_Description, INST_Sub_Type_Code, INST_Sub_Type_Description)

# drill down into school district type -- 10 subtypes
count(ids2 |> filter(INST_Type_Code=="16"), INST_Type_Code, INST_Type_Description, INST_Sub_Type_Code, INST_Sub_Type_Description)
#    INST_Type_Code INST_Type_Description INST_Sub_Type_Code INST_Sub_Type_Description     n
#    <chr>          <chr>                 <chr>              <chr>                     <int>
#  1 16             SCHOOL DISTRICTS      1                  CITY                         89
#  2 16             SCHOOL DISTRICTS      10                 100% CONTRACT                 3
#  3 16             SCHOOL DISTRICTS      2                  UNION FREE                   62
#  4 16             SCHOOL DISTRICTS      3                  INDEPENDENT UNION FREE       86
#  5 16             SCHOOL DISTRICTS      4                  CENTRAL                     268
#  6 16             SCHOOL DISTRICTS      5                  COMMON                        8
#  7 16             SCHOOL DISTRICTS      6                  CITY CENTRAL                  7
#  8 16             SCHOOL DISTRICTS      7                  INDEPENDENT CENTRAL         195
#  9 16             SCHOOL DISTRICTS      8                  SPECIAL ACT                  13
# 10 16             SCHOOL DISTRICTS      9                  CENTRAL HIGH SCHOOL           3

# convert all-numeric codes to integers (i.e., type and subtype) for more-convenient sorting
ids3 <- ids2 |> 
  mutate(across(c(INST_Type_Code, INST_Sub_Type_Code), as.integer))

# focus on school districts
sdids1 <- ids3 |> 
  filter(INST_Type_Code==16) |> 
  mutate(across(c(Active_Date, Inactive_Date), as.Date))

summary(sdids1)

# check for duplicates
skim(sdids1) 
sdids1 |> 
  mutate(n=n(), .by=SchDistofLoc_Code) |> 
  filter(n>1)  # double check -- no duplicates

# which codes can we drop?
count(sdids1, EDEN_LEA_Type_CODE) # keep
count(sdids1, EDEN_LEA_OP_Status_Code) # keep
count(sdids1, EDEN_NCES_SCH_ID) # all NA, drop
count(sdids1, EDEN_Sch_Type_Code)  # all NA, drop
count(sdids1, EDEN_Sch_OP_Status_Code)  # all NA, drop
count(sdids1, INST_Type_Description) # all "SCHOOL DISTRICTS", drop

sdids2 <- sdids1 |> 
  select(instid=Institution_ID, bedscode=SchDistofLoc_Code, sedcode=SED_Code, 
         legalname=Legal_Name, popname=Popular_Name,
         subtype=INST_Sub_Type_Code, subtypedesc=INST_Sub_Type_Description,
         cntycode=County_Code,
         cntyname=County_Description,
         ncesid=EDEN_NCES_LEA_ID, ncestype=EDEN_LEA_Type_CODE, ncesopstat=EDEN_LEA_OP_Status_Code,
         activedate=Active_Date,
         inactivedate=Inactive_Date
         ) 

glimpse(sdids2)

saveRDS(sdids2, here::here("data", "sedcodes_xwalk.rds"))

```


## Fiscal data

https://oms32.nysed.gov/faru/Profiles/2020-21_FiscalProfiles.html
https://stateaid.nysed.gov/st3/
https://stateaid.nysed.gov/st3/st3data.htm
https://www.oms.nysed.gov/faru/Analysis/cover.html

### ST-3 data

```{r}
#| label: get-st3raw
#| eval: false
#| include: false

rawpath <- path(dnysed, "st3", "raw")

(files <- c(dir_ls(rawpath, glob=c("*.txt")), dir_ls(rawpath, glob=c("*.TXT"))))

df1 <- vroom(files, 
            col_names = c("distid", "mainframe1", "mainframe2", "value"), 
            col_types="cccc",
            id="fname")
dim(df1)
df1[1:5, ]
glimpse(df1)
count(df1, fname)
ht(df1)
skim(df1)

df2 <- df1 |> 
  mutate(fname=path_file(fname),
         fye=case_when(str_sub(fname, 1, 3)=="Raw" ~ 
                         str_sub(fname, 10, 13),
                       str_sub(fname, 1, 3) %in% c("ST3", "st3") ~
                         str_sub(fname, 5, 8),
                       TRUE ~ "ERROR"))
count(df2, fye, fname)

df3 <- df2 |> 
  mutate(fye=as.integer(fye)) |> 
  select(fye, distid, mainframe1, mainframe2, value) |> 
  arrange(fye, distid, mainframe1, mainframe2)
glimpse(df3)

saveRDS(df3, here::here("data", "st3raw.rds"))


```

```{r}
#| label: cleanst3
#| eval: false
#| include: false

df1 <- readRDS(here::here("data", "st3raw.rds"))
ht(df1)

check <- df1 |> filter(is.na(value))
count(check, fye, sort=TRUE)
count(check, distid, sort=TRUE)
count(check, mainframe1, sort=TRUE)
count(check, mainframe2, sort=TRUE)

df1 |> 
  filter(fye==2021, distid=="010100") |> 
  write_csv(here::here("scratch", "st3albany2021.csv"))


```


## School report card data

As of now, we only get school report card data for 2021 and 2022, as the Cornell data are available for earlier years.

```{r}
#| label: report-card-sources
#| eval: false
#| include: false

# https://data.nysed.gov/downloads.php landing page


# Report card data selected years ----
# https://data.nysed.gov/files/essa/21-22/SRC2022.zip

# https://data.nysed.gov/files/apib/2021/APIB21.zip  AP_IB_Course_Summary_2021
# https://data.nysed.gov/files/apib/1920/APIB20.zip
# https://data.nysed.gov/files/apib/1819/APIB19.zip
# does not appear to be available for earlier years

# glossary https://data.nysed.gov/glossary.php?report=apib
# business rules https://data.nysed.gov/businessrules.php?type=apib

# url <- "https://data.nysed.gov/files/apib/1718/APIB18.zip" # does not exist
url <- "https://data.nysed.gov/files/apib/1819/APIB19.zip"
url <- "https://data.nysed.gov/files/apib/1920/APIB20.zip"
url <- "https://data.nysed.gov/files/apib/2021/APIB21.zip"

fpath <- path(dnysed, "apib", path_file(url))
download.file(url, fpath, mode="wb")

# important items
# AP and IB assessment data are reported to the SIRS in Assessment Fact. The count of students who took the exam. The percentage of those AP students reported with a score of 3 or higher which are generally considered passing, while IB assessments reported with a score of 4 or higher are generally considered passing.


```


```{r}
#| label: ela-math
#| eval: false
#| include: false

# E:\data\nysed\rptcard\SRC2022
# Tables: Annual EM ELA Annual EM MATH

fpath <- path(dnysed, "rptcard", "SRC2022", "SRC2022_GroupIV.accdb")
con <- RODBC::odbcConnectAccess2007(fpath)
RODBC::sqlTables(con) |> 
  filter(TABLE_TYPE=="TABLE") |> 
  pull(TABLE_NAME)
dfela <- RODBC::sqlFetch(con, "Annual EM ELA", as.is=TRUE)
dfmath <- RODBC::sqlFetch(con, "Annual EM MATH", as.is=TRUE)
glimpse(dfela)
glimpse(dfmath)
close(con)

setdiff(names(dfela), names(dfmath))
setdiff(names(dfmath), names(dfela))

count(dfela, ASSESSMENT_NAME)
count(dfmath, ASSESSMENT_NAME)

saveRDS(dfela, here::here("data", "ela_src2022.rds"))
saveRDS(dfmath, here::here("data", "math_src2022.rds"))


```



## Advanced Placement (AP) and International Baccalaureate (IB) course participation and assessment data 

The data appear (??) to be limited to 2018-19 through 2020-21

https://data.nysed.gov/APIB.php?year=2020

Glossary: https://data.nysed.gov/glossary.php?report=apib

Business rules: https://data.nysed.gov/businessrules.php?type=apib

This report provides information to the public of Advanced Placement (AP) and International Baccalaureate (IB) course participation and assessment data reported to the New York State Education Department by school districts and charter schools. This data are an important part of the Board of Regents’ effort to create and transparently report on the educational equity for all students. The data are used as part of the calculation of an institution’s College, Career, and Civic Readiness. The data are aggregated by grade level and can be filtered by student subgroups.

Data is reported by education institutions to the State Education Department throughout the school year and are available for verification by districts via the Level 2 Reporting environment (L2RPT) until the close of the state data warehouse in August. Although the report does not need to be certified, the Department strongly encourages the data to be reviewed by the district for accuracy as the underlying data used to create this report are included in other L2RPTs that are required to be certified. For the most updated information, please contact the school district.



```{r}
#| label: AP-sources
#| eval: false
#| include: false

# AP and similar course data ----
# https://data.nysed.gov/APIB.php?year=2019&state=yes
# https://data.nysed.gov/downloads.php
# https://data.nysed.gov/files/apib/2021/APIB21.zip  AP_IB_Course_Summary_2021
# https://data.nysed.gov/files/apib/1920/APIB20.zip
# https://data.nysed.gov/files/apib/1819/APIB19.zip
# does not appear to be available for earlier years

# glossary https://data.nysed.gov/glossary.php?report=apib
# business rules https://data.nysed.gov/businessrules.php?type=apib

# url <- "https://data.nysed.gov/files/apib/1718/APIB18.zip" # does not exist
url <- "https://data.nysed.gov/files/apib/1819/APIB19.zip"
url <- "https://data.nysed.gov/files/apib/1920/APIB20.zip"
url <- "https://data.nysed.gov/files/apib/2021/APIB21.zip"

fpath <- path(dnysed, "apib", path_file(url))
download.file(url, fpath, mode="wb")

# important items
# AP and IB assessment data are reported to the SIRS in Assessment Fact. The count of students who took the exam. The percentage of those AP students reported with a score of 3 or higher which are generally considered passing, while IB assessments reported with a score of 4 or higher are generally considered passing.


```


```{r}
#| label: get-AP-data
#| eval: false
#| include: false

# APIB19.accdb
# 

# fn <- "AP IB Course Counts.csv"
# # APIB19
# fpath <- path(dnysed, "apib", path_file(url))
# 
# fpath <- path(dnysed, "apib", "APIB19", "APIB19.accdb")
# 
# db_path <- r"(C:\Users\donbo\Downloads\bulk\SRC2022\SRC2022_GroupIV.accdb)"


fpath <- path(dnysed, "apib", "APIB19", "APIB19.accdb")
con <- RODBC::odbcConnectAccess2007(fpath)
RODBC::sqlTables(con) |> 
  filter(TABLE_TYPE=="TABLE") |> 
  pull(TABLE_NAME)
df2019 <- RODBC::sqlFetch(con, "AP IB Course Counts", as.is=TRUE)
glimpse(df2019)
close(con)


fpath <- path(dnysed, "apib", "APIB20", "AP_IB_Course_Tables_2020.accdb")
con <- RODBC::odbcConnectAccess2007(fpath)
RODBC::sqlTables(con) |> 
  filter(TABLE_TYPE=="TABLE") |> 
  pull(TABLE_NAME)
df2020 <- RODBC::sqlFetch(con, "AP_IB_Course_Summary_2020", as.is=TRUE)
glimpse(df2020)
close(con)

setdiff_all(names(df2019), names(df2020))
setdiff(names(df2019), names(df2020)) # "ECON DISADVANTAGED" "SWD"                "ELL"                "APIB IND"   
setdiff(names(df2020), names(df2019)) # "ECODIS_IND" "SWD_IND"    "ELL_IND"    "APIB_IND"

fpath <- path(dnysed, "apib", "APIB21", "AP_IB_Course_Tables_2021.accdb")
con <- RODBC::odbcConnectAccess2007(fpath)
RODBC::sqlTables(con) |> 
  filter(TABLE_TYPE=="TABLE") |> 
  pull(TABLE_NAME)
df2021 <- RODBC::sqlFetch(con, "AP_IB_Course_Summary_2021", as.is=TRUE)
glimpse(df2021)
close(con)

setdiff_all(names(df2021), names(df2020)) # "grade_level"
setdiff(names(df2021), names(df2020)) # "grade_level" 
setdiff(names(df2020), names(df2021)) # none

df <- bind_rows(
  df2019 |> rename(ECODIS_IND="ECON DISADVANTAGED",
                SWD_IND=SWD,
                ELL_IND=ELL,
                APIB_IND="APIB IND"
                ),
  df2020,
  df2021)
glimpse(df)


df |> 
  setNames(str_to_lower(names(.data)))

df1 <- df |> 
  rename(syear=REPORT_SCHOOL_YEAR,
         gender=STUDENT_GENDER,
         ethnicity=ETHNIC_DESC_RC,
         disadvantaged=ECODIS_IND,
         swd=SWD_IND,
         ell=ELL_IND,
         schoolid=STATE_LOCATION_ID,
         schname=LOCATION_NAME,
         distid=STATE_DISTRICT_ID,
         distname=DISTRICT_NAME,
         cocode=COUNTY_CODE,
         coname=COUNTY_DESC,
         nrcode=NEEDS_RESOURCE_CODE,
         nrdesc=NEEDS_RESOURCE_DESC,
         apib=APIB_IND,
         courseid=COURSE_ID,
         subject=SUBJECT_AREA,
         course=COURSE_DESC,
         grade=grade_level,
         nstudents=STUDENT_COUNT) |> 
  mutate(endyear=str_sub(syear, 1, 4) |> as.integer() + 1L) |> 
  relocate(endyear, .after=syear)
glimpse(df1)

saveRDS(df1, here::here("data", "apib.rds"))



count(df1, endyear)
dname <- "Hudson"
dname <- "Argyle"
dname <- "Salem"
dname <- "Hastings"
dname <- "Bethlehem"
dname <- "Granville"
dname <- "Hartford"
df1 |> 
  filter(str_detect(distname, coll(dname, ignore_case=TRUE))) |> 
  select(distid, distname) |> 
  distinct()

argid <- "640101"
ccsid <- "641610"
gvillid <- "640701"
gwid <- "640801"
hfallsid <- "641301"
salemid <- "641501"
saraid <- "521800"
schuyid <- "521701"
locals <- c(argid, ccsid, gvillid, gwid, hfallsid, salemid, saraid, schuyid)

bethid <- "010306"
ftedid <- "640601"
hartid <- "641001"
hohid <- "660404"
doi <- c(locals, bethid, ftedid, hartid, hohid)

df1 |> 
  filter(str_sub(distid, 1, 2) == "64") |> 
  select(distid, distname) |> 
  distinct()

df1 |> 
  filter(str_sub(distid, 1, 6) %in% doi) |> 
  summarise(nstudents=sum(nstudents), .by=c(endyear, distid, distname)) |> 
  pivot_wider(names_from = endyear, values_from = nstudents) |> 
  mutate(pch1921=`2021` / `2019` - 1,
         pch2021=`2021` / `2020` - 1) |> 
  arrange(pch1921)


df1 |> 
  filter(str_sub(distid, 1, 6) %in% doi) |> 
  summarise(ncourses=length(unique(courseid)), .by=c(endyear, distid, distname)) |> 
  pivot_wider(names_from = endyear, values_from = ncourses) |> 
  mutate(ch1921=`2021` - `2019`,
         ch2021=`2021` - `2020`) |> 
  arrange(ch1921)

df1 |> filter(endyear==2021, str_sub(distid, 1, 6) %in% doi) |> 
  select(distid, distname, courseid, subject, course, nstudents) |> 
  summarise(n=sum(nstudents), .by=c(distid, distname, courseid, subject, course)) |> 
  distinct()


# questions
# do pre-2021 data include 11th graders?
# if not, can I get them from the research files?
# can i add grade enrollment
# where do kids who take ap through boces count?



```


## Career pathways

```{r}
#| label: pathways
#| eval: false
#| include: false

# https://www.nysed.gov/sites/default/files/programs/curriculum-instruction/multiplepathwayshandout.pdf
# https://www.nysed.gov/curriculum-instruction/multiple-pathways-frequently-asked-questions
# https://www.nysed.gov/curriculum-instruction/multiple-pathways




```


